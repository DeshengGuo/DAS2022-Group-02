#print(i)
this.aic <- glm(Total.Number.of.Family.members ~ ., data = data[, code], family = binomial(link = "logit"))$aic
if (min.aic > this.aic) {
min.aic <- this.aic
which.model <- code
}
}
print(min.aic)
print(which.model)
print(colnames(data[, which.model]))
model <- glm(Total.Number.of.Family.members ~ ., data = data[, which.model],
family = binomial(link = "logit"))
summary(model)
fit.data <- data %>%
mutate(Total.Number.Predict = fitted(model))
plot(fit.data$Total.Number.of.Family.members, fit.data$Total.Number.Predict,
xlab = "True", ylab = "Predict")
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
#filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
group_by(Total.Number.of.Family.members) %>%
summarise(q1 = quantile(Total.Number.Predict, 0.25), q3 = quantile(Total.Number.Predict, 0.75))
#hist(fit.data[fit.data$Total.Number.of.Family.members == 2, ]$Total.Number.Predict)
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
ggplot(data = fit.data, aes(x = Total.Number.of.Family.members, y = Total.Number.Predict)) +
geom_point(colour = "red", size = 3)
library(olsrr)
library(dplyr)
data <- read.csv("dataset2.csv")
#data[, 12] <- log(data[, 1])
#data[, 13] <- log(data[, 3])
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
#data[, 7] <- as.factor(data[, 7])
data[, 11] <- as.factor(data[, 11])
data = data[, -2] # This variable has only one factor
model <- glm(Total.Number.of.Family.members ~ ., data = data,
family = poisson(link = "logit"))
summary(model)
### Fitting all possible models
# 10 total variables, need a vector of length 10
encode <- function(x) {
results <- c()
for(i in 1:10) {
results[i] <- ifelse(x%%2 == 1, TRUE, FALSE)
x <- floor(x/2)
}
return (results)
}
min.aic = model$aic
which.model = 0
for (i in 33:4095) {
# 32 contains single variable: Total.Number and will not be used,
# Number of all possible models is 2^10
code <- encode(i)
if (code[6] == FALSE){ # Total.Number is not chosen, we skip
next
}
#print(i)
this.aic <- glm(Total.Number.of.Family.members ~ ., data = data[, code], family = binomial(link = "logit"))$aic
if (min.aic > this.aic) {
min.aic <- this.aic
which.model <- code
}
}
print(min.aic)
print(which.model)
print(colnames(data[, which.model]))
model <- glm(Total.Number.of.Family.members ~ ., data = data[, which.model],
family = binomial(link = "logit"))
summary(model)
fit.data <- data %>%
mutate(Total.Number.Predict = fitted(model))
plot(fit.data$Total.Number.of.Family.members, fit.data$Total.Number.Predict,
xlab = "True", ylab = "Predict")
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
#filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
group_by(Total.Number.of.Family.members) %>%
summarise(q1 = quantile(Total.Number.Predict, 0.25), q3 = quantile(Total.Number.Predict, 0.75))
#hist(fit.data[fit.data$Total.Number.of.Family.members == 2, ]$Total.Number.Predict)
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
ggplot(data = fit.data, aes(x = Total.Number.of.Family.members, y = Total.Number.Predict)) +
geom_point(colour = "red", size = 3)
library(olsrr)
library(dplyr)
data <- read.csv("dataset2.csv")
#data[, 12] <- log(data[, 1])
#data[, 13] <- log(data[, 3])
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
#data[, 7] <- as.factor(data[, 7])
data[, 11] <- as.factor(data[, 11])
data = data[, -2] # This variable has only one factor
model <- glm(Total.Number.of.Family.members ~ ., data = data,
family = poisson(link = "logit"))
summary(model)
### Fitting all possible models
# 10 total variables, need a vector of length 10
encode <- function(x) {
results <- c()
for(i in 1:10) {
results[i] <- ifelse(x%%2 == 1, TRUE, FALSE)
x <- floor(x/2)
}
return (results)
}
min.aic = model$aic
which.model = 0
for (i in 33:4095) {
# 32 contains single variable: Total.Number and will not be used,
# Number of all possible models is 2^10
code <- encode(i)
if (code[6] == FALSE){ # Total.Number is not chosen, we skip
next
}
#print(i)
this.aic <- glm(Total.Number.of.Family.members ~ ., data = data[, code], family = binomial(link = "logit"))$aic
if (min.aic > this.aic) {
min.aic <- this.aic
which.model <- code
}
}
print(min.aic)
print(which.model)
print(colnames(data[, which.model]))
model <- glm(Total.Number.of.Family.members ~ ., data = data[, which.model],
family = poisson(link = "logit"))
summary(model)
fit.data <- data %>%
mutate(Total.Number.Predict = fitted(model))
plot(fit.data$Total.Number.of.Family.members, fit.data$Total.Number.Predict,
xlab = "True", ylab = "Predict")
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
#filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
group_by(Total.Number.of.Family.members) %>%
summarise(q1 = quantile(Total.Number.Predict, 0.25), q3 = quantile(Total.Number.Predict, 0.75))
#hist(fit.data[fit.data$Total.Number.of.Family.members == 2, ]$Total.Number.Predict)
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
ggplot(data = fit.data, aes(x = Total.Number.of.Family.members, y = Total.Number.Predict)) +
geom_point(colour = "red", size = 3)
library(olsrr)
library(dplyr)
data <- read.csv("dataset2.csv")
#data[, 12] <- log(data[, 1])
#data[, 13] <- log(data[, 3])
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
#data[, 7] <- as.factor(data[, 7])
data[, 11] <- as.factor(data[, 11])
data = data[, -2] # This variable has only one factor
model <- glm(Total.Number.of.Family.members ~ ., data = data,
family = poisson(link = "logit"))
summary(model)
### Fitting all possible models
# 10 total variables, need a vector of length 10
encode <- function(x) {
results <- c()
for(i in 1:10) {
results[i] <- ifelse(x%%2 == 1, TRUE, FALSE)
x <- floor(x/2)
}
return (results)
}
min.aic = model$aic
which.model = 0
for (i in 33:1023) {
# 32 contains single variable: Total.Number and will not be used,
# Number of all possible models is 2^10
code <- encode(i)
if (code[6] == FALSE){ # Total.Number is not chosen, we skip
next
}
#print(i)
this.aic <- glm(Total.Number.of.Family.members ~ ., data = data[, code], family = binomial(link = "logit"))$aic
if (min.aic > this.aic) {
min.aic <- this.aic
which.model <- code
}
}
print(min.aic)
print(which.model)
print(colnames(data[, which.model]))
model <- glm(Total.Number.of.Family.members ~ ., data = data[, which.model],
family = poisson(link = "logit"))
summary(model)
fit.data <- data %>%
mutate(Total.Number.Predict = fitted(model))
plot(fit.data$Total.Number.of.Family.members, fit.data$Total.Number.Predict,
xlab = "True", ylab = "Predict")
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
#filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
group_by(Total.Number.of.Family.members) %>%
summarise(q1 = quantile(Total.Number.Predict, 0.25), q3 = quantile(Total.Number.Predict, 0.75))
#hist(fit.data[fit.data$Total.Number.of.Family.members == 2, ]$Total.Number.Predict)
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
ggplot(data = fit.data, aes(x = Total.Number.of.Family.members, y = Total.Number.Predict)) +
geom_point(colour = "red", size = 3)
help(family)
library(olsrr)
library(dplyr)
data <- read.csv("dataset2.csv")
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
data[, 7] <- as.factor(data[, 7])
data[, 11] <- as.factor(data[, 11])
data = data[, -2] # This variable has only one factor
model <- glm(Total.Number.of.Family.members ~ ., data = data,
family = binomial(link = "logit"))
summary(model)
library(olsrr)
library(dplyr)
data <- read.csv("dataset2.csv")
data[, 12] <- log(data[, 1])
data[, 13] <- log(data[, 3])
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
data[, 7] <- as.factor(data[, 7])
data[, 11] <- as.factor(data[, 11])
data = data[, -2] # This variable has only one factor
model <- glm(Total.Number.of.Family.members ~ ., data = data,
family = binomial(link = "logit"))
summary(model)
### Fitting all possible models
# 10 total variables, need a vector of length 10
encode <- function(x) {
results <- c()
for(i in 1:12) {
results[i] <- ifelse(x%%2 == 1, TRUE, FALSE)
x <- floor(x/2)
}
return (results)
}
min.aic = model$aic
which.model = 0
for (i in 33:4095) {
# 32 contains single variable: Total.Number and will not be used,
# Number of all possible models is 2^10
code <- encode(i)
if (code[6] == FALSE){ # Total.Number is not chosen, we skip
next
}
#print(i)
this.aic <- glm(Total.Number.of.Family.members ~ ., data = data[, code], family = binomial(link = "logit"))$aic
if (min.aic > this.aic) {
min.aic <- this.aic
which.model <- code
}
}
print(min.aic)
print(which.model)
print(colnames(data[, which.model]))
model <- glm(Total.Number.of.Family.members ~ ., data = data[, which.model],
family = binomial(link = "logit"))
summary(model)
fit.data <- data %>%
mutate(Total.Number.Predict = fitted(model))
plot(fit.data$Total.Number.of.Family.members, fit.data$Total.Number.Predict,
xlab = "True", ylab = "Predict")
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
#filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
group_by(Total.Number.of.Family.members) %>%
summarise(q1 = quantile(Total.Number.Predict, 0.25), q3 = quantile(Total.Number.Predict, 0.75))
#hist(fit.data[fit.data$Total.Number.of.Family.members == 2, ]$Total.Number.Predict)
fit.data %>%
select("Total.Number.of.Family.members", "Total.Number.Predict") %>%
filter(Total.Number.of.Family.members == 1 | Total.Number.of.Family.members == 2) %>%
ggplot(data = fit.data, aes(x = Total.Number.of.Family.members, y = Total.Number.Predict)) +
geom_point(colour = "red", size = 3)
knitr::opts_chunk$set(echo = TRUE, comment = NA, message = FALSE, warning = FALSE)
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(MASS)
library(kableExtra)
library(olsrr)
#library(qcc)
library(skimr)
library(GGally)
#import data
data<-read.csv("dataset2.csv")
#processing discrete data
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
data[, 11] <- as.factor(data[, 11])
data = data[, -2]
#divide continuous and discrete variables
con_var = c("Total.Number.of.Family.members","Total.Household.Income",
"Total.Food.Expenditure","Household.Head.Age",
"House.Floor.Area", "House.Age", "Number.of.bedrooms")
dis_var = c("Household.Head.Sex", "Type.of.Household", "Electricity")
# data summary of continuous variables
data[con_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Mean=round(numeric.mean),
SD=round(numeric.sd),
Min=numeric.p0,
Median=numeric.p50,
Max=numeric.p100,
IQR = numeric.p75-numeric.p50) %>%
kable(caption = '\\label{tab:summaries_con} Summary statistics of continuous variables') %>%
kable_styling(font_size = 10, latex_options = "hold_position")
# data summary of discrete variables
data[dis_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Counts=factor.top_counts) %>%
kable(caption = '\\label{tab:summaries_dis} Summary statistics of discrete variables') #%>%
#kable_styling(font_size = 10, latex_options = "hold_position")
#create a poisson distribution
n = dpois(1:16, 4) *1249
x = c(1:16)
poi = data.frame(cbind(x, n))
#plot the distribution of "Total.Number.of.Family.members"
ggplot(data, aes(x=Total.Number.of.Family.members)) +
geom_histogram() +
geom_line(data=poi, mapping=aes(x=x, y=n), size=1, color="#3399CC") +
ylab("Count")
model<-glm(Total.Number.of.Family.members~Total.Household.Income+Total.Food.Expenditure+Household.Head.Sex+Household.Head.Age+Type.of.Household+House.Floor.Area+House.Age+Number.of.bedrooms+Electricity, data=data, family = "poisson")
summary(model)
step(model)
model.better<-glm(Total.Number.of.Family.members~Total.Household.Income+Total.Food.Expenditure +Household.Head.Sex+Household.Head.Age+Type.of.Household+House.Age+Number.of.bedrooms, data=data,
family = "poisson")
library(car)
outlierTest(model.better)
data<-data[-944,]
model.better<-glm(Total.Number.of.Family.members~Total.Household.Income+Total.Food.Expenditure +Household.Head.Sex+Household.Head.Age+Type.of.Household+House.Age+Number.of.bedrooms, data=data,
family = "poisson")
outlierTest(model.better)
summary(model.better)
library(epiDisplay)
poisgof(model.better)
exp(coef(model.better))
model<-glm(Total.Number.of.Family.members~log(Total.Household.Income)+log(Total.Food.Expenditure)+Household.Head.Sex+Household.Head.Age+Type.of.Household+House.Floor.Area+House.Age+Number.of.bedrooms+Electricity, data=data, family = "poisson")
summary(model)
step(model)
model.best<-glm(Total.Number.of.Family.members~log(Total.Household.Income)+log(Total.Food.Expenditure) +Household.Head.Sex+Household.Head.Age+Type.of.Household+House.Age+Number.of.bedrooms+Electricity, data=data,
family = "poisson")
outlierTest(model.best)
summary(model.best)
library(epiDisplay)
poisgof(model.best)
exp(coef(model.best))
#import data
data<-read.csv("dataset2.csv")
#processing discrete data
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
data[, 11] <- as.factor(data[, 11])
data = data[, -2]
View(data)
#import data
data<-read.csv("dataset2.csv")
View(data)
#select continuous variables
con_var = c("Total.Number.of.Family.members","Total.Household.Income",
"Total.Food.Expenditure","Household.Head.Age",
"House.Floor.Area", "House.Age", "Number.of.bedrooms")
# data summary of continuous variables
data[con_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Mean=round(numeric.mean),
SD=round(numeric.sd),
Min=numeric.p0,
Median=numeric.p50,
Max=numeric.p100,
IQR = numeric.p75-numeric.p50) %>%
kable(caption = '\\label{tab:summaries_con}
Summary statistics of continuous variables') %>%
kable_styling(font_size = 10, latex_options = "hold_position")
#select continuous variables
con_var = c("Total.Number.of.Family.members","Total.Household.Income",
"Total.Food.Expenditure","Household.Head.Age",
"House.Floor.Area", "House.Age", "Number.of.bedrooms")
# data summary of continuous variables
data[con_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Mean=round(numeric.mean),
SD=round(numeric.sd),
Min=numeric.p0,
Median=numeric.p50,
Max=numeric.p100,
IQR = numeric.p75-numeric.p50) %>%
kable(caption = '\\label{tab:summaries_con} Summary statistics of continuous variables') %>%
kable_styling(font_size = 10, latex_options = "hold_position")
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(MASS)
library(kableExtra)
library(olsrr)
#library(qcc)
library(skimr)
library(GGally)
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(MASS)
library(kableExtra)
library(olsrr)
library(skimr)
library(GGally)
#import data
data<-read.csv("dataset2.csv")
#processing discrete data
data[, 4] <- as.factor(data[, 4])
data[, 6] <- as.factor(data[, 6])
data[, 11] <- as.factor(data[, 11])
#delete "Region" column
data = data[, -2]
#select continuous variables
con_var = c("Total.Number.of.Family.members","Total.Household.Income",
"Total.Food.Expenditure","Household.Head.Age",
"House.Floor.Area", "House.Age", "Number.of.bedrooms")
# data summary of continuous variables
data[con_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Mean=round(numeric.mean),
SD=round(numeric.sd),
Min=numeric.p0,
Median=numeric.p50,
Max=numeric.p100,
IQR = numeric.p75-numeric.p50) %>%
kable(caption = '\\label{tab:summaries_con} Summary statistics of continuous variables') %>%
kable_styling(font_size = 10, latex_options = "hold_position")
#select continuous variables
dis_var = c("Household.Head.Sex", "Type.of.Household", "Electricity")
# data summary of discrete variables
data[dis_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Counts=factor.top_counts) %>%
kable(caption = '\\label{tab:summaries_dis} Summary statistics of discrete variables') #%>%
#kable_styling(font_size = 10, latex_options = "hold_position")
#select continuous variables
dis_var = c("Household.Head.Sex", "Type.of.Household", "Electricity")
# data summary of discrete variables
data[dis_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Counts=factor.top_counts) %>%
kable(caption = '\\label{tab:summaries_dis}
Summary statistics of discrete variables') #%>%
#kable_styling(font_size = 10, latex_options = "hold_position")
#select continuous variables
con_var = c("Total.Number.of.Family.members","Total.Household.Income",
"Total.Food.Expenditure","Household.Head.Age",
"House.Floor.Area", "House.Age", "Number.of.bedrooms")
# data summary of continuous variables
data[con_var] %>%
skim() %>%
transmute(Variable=skim_variable,
Mean=round(numeric.mean),
SD=round(numeric.sd),
Min=numeric.p0,
Median=numeric.p50,
Max=numeric.p100,
IQR = numeric.p75-numeric.p50) %>%
kable(caption = '\\label{tab:summaries_con}
Summary statistics of continuous variables') %>%
kable_styling(font_size = 10, latex_options = "hold_position")
#create a poisson distribution
n = dpois(1:16, 4) *1249
x = c(1:16)
poi = data.frame(cbind(x, n))
#plot the distribution of "Total.Number.of.Family.members"
ggplot(data, aes(x=Total.Number.of.Family.members)) +
geom_histogram() +
geom_line(data=poi, mapping=aes(x=x, y=n), size=1, color="#3399CC") +
ylab("Count")
#create a poisson distribution
n = dpois(1:16, 4) *1249
x = c(1:16)
poi = data.frame(cbind(x, n))
#plot the distribution of "Total.Number.of.Family.members"
ggplot(data, aes(x=Total.Number.of.Family.members)) +
geom_histogram() +
geom_line(data=poi, mapping=aes(x=x, y=n), size=1, color="#3399CC") +
ylab("Count")
#create a poisson distribution
n = dpois(1:16, 4) *1249
x = c(1:16)
poi = data.frame(cbind(x, n))
#plot the distribution of "Total.Number.of.Family.members"
ggplot(data, aes(x=Total.Number.of.Family.members)) +
geom_histogram() +
geom_line(data=poi, mapping=aes(x=x, y=n), size=1, color="#3399CC") +
ylab("Count")
